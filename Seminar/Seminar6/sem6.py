
# Задача №35. Решение в группах
# Напишите функцию, которая принимает одно число и
# проверяет, является ли оно простым
# Напоминание: Простое число - это число, которое
# имеет 2 делителя: 1 и n(само число)
# Input: 5
# Output: yes

# def Simple (Turn, del1=2):
#     if del1*del1>=Turn:
#         return True
#     elif Turn%del1==0:
#         return False
#     else:
#         return Simple(Turn, del1+1)
# print(Simple(10))


# определить полиндром введеное слово или нет через рекурсию
# def reves1(n):
#     if n[0] !=n[-1]:
#         return False
#     elif len(n) <=1:
#         return True
#     return reves1(n[1:-1])

# print(reves1('казак'))

'''
Задача №39. Решение в группах
Даны два массива чисел. Требуется вывести те элементы
первого массива (в том порядке, в каком они идут в первом
массиве), которых нет во втором массиве. Пользователь вводит
число N - количество элементов в первом массиве, затем N
чисел - элементы массива. Затем число M - количество
элементов во втором массиве. Затем элементы второго массива
Ввод: Вывод:
7 3 3 2 12
3 1 3 4 2 4 12
6
4 15 43 1 15 1 (каждое число вводится с новой строки)
'''
# from random import randint

# n = int(input('введите длину 1-го массива: '))
# m = int(input('введите длину 2-го массива: '))

# # list1 = []
# # list2 = []

# # for _ in range(n):
# #     list2.append(randint(1, 10))
# list1 = [randint(1, 10) for _ in range(n)]
# print(list1)

# # for _ in range(m):
# #     list2.append(randint(1, 10))
# set2 = {randint(1, 10) for _ in range(m)}
# print(set2)

# res_list = []

# for num in list1:
#     if num not in set2:
#        res_list.append(num) 
#        print(num, end= ' ')

# print(*res_list)


# Задача №41. Решение в группах
# Дан массив, состоящий из целых чисел. Напишите
# программу, которая в данном массиве определит
# количество элементов, у которых два соседних и, при
# этом, оба соседних элемента меньше данного. Сначала
# вводится число N — количество элементов в массиве
# Далее записаны N чисел — элементы массива. Массив
# состоит из целых чисел.
# Ввод:          Ввод:
# 5               5
# 1 2 3 4 5       1 5 1 5 1
# Вывод:          Вывод:
# 0               2
# (каждое число вводится с новой строки)

# import random

# n = int(input('введите размер списка: '))
# num = [random.randint(1, 5) for _ in range(n)]
# print(num)

# count = 0
# for i in range(1, len(num)-1):
#     if num[i-1] < num[i] > num[i+1]:
#         count +=1
# print(count)

# # print(sum([1 for i in range(1, len(num)-1) if num[i-1] < num[i] > num[i+1]]))



# Задача №43. Решение в группах
# Дан список чисел. Посчитайте, сколько в нем пар
# элементов, равных друг другу. Считается, что любые
# два элемента, равные друг другу образуют одну пару,
# которую необходимо посчитать. Вводится список
# чисел. Все числа списка находятся на разных
# строках.
# Ввод:             Вывод:
# 1 2 3 2 3 2        11

# a = input().split()
# print(sum(a.count(x) - 1 for x in a) // 2)


# s = input().split()
# counter = 0
# for i in range(len(s)):
#     for q in range(i +1, len(s)):
#         if s[i] == s[q]:
#             counter +=1
# print(counter)



# Задача №45. Решение в группах
# Два различных натуральных числа n и m называются
# дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и
# наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных
# чисел, каждое из которых не превосходит k. Программа
# получает на вход одно натуральное число k, не
# превосходящее 105
# . Программа должна вывести все
# пары дружественных чисел, каждое из которых не
# превосходит k. Пары необходимо выводить по одной в
# строке, разделяя пробелами. Каждая пара должна быть
# выведена только один раз (перестановка чисел новую
# пару не дает).
# Ввод: Вывод:
# 300    220 284


def sum_of_divisors(n):
    """Возвращает сумму всех делителей числа n, исключая само число."""
    summa = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            summa += i
            if i != n // i:
                summa += n // i
    return summa

def find_friendly_numbers(k):
    """Выводит все пары дружественных чисел, каждое из которых не превосходит k."""
    # Словарь для хранения числа и суммы его делителей
    divisors_sum = {}
    for i in range(2, k + 1):
        divisors_sum[i] = sum_of_divisors(i)

    # Находим и печатаем пары дружественных чисел
    for n in divisors_sum:
        m = divisors_sum[n]
        if m in divisors_sum and divisors_sum[m] == n and n != m:
            print(n, m)

find_friendly_numbers(100000)